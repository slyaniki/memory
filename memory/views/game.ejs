<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="/css/style.css">
    <title>NaN_test</title>
    <style>
        div.welcome{
            width: 500px;
            height: 400px;
            background: white;
            color: black;
            position: fixed;
            z-index: 1;
            top: 20%;
            opacity: 0;
            left: 30%;
            text-align:center;
        }
        .welcome button{
            background: black;
            color: white;
            padding: 5px;
            font-size: 12px;
            border-radius: 25px;
            margin-top: 80px;
            transition: all 1s ease;
        }
    </style>
</head>
<body id="game">
<div id="preloader">
    <h2></h2>
    <div>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
    </div><br>
    <p>Loading ...</p>
</div>
    <div class="ombre" style="<% if(instance){%> display: none; <%}else{%> display: block; <%}%>"></div>
    <div class="welcome" style="<% if(instance){%> display: none; <%}else{%> display: block; <%}%>">
        <h1><%= game.name %></h1>
        <p>ce jeu est un jeu de mémoire de difficulté croissante qui se déroule sur 18 niveaux</p>
        <p>vous devrez reproduire les différents séquences des différents niveaux</p>
        <p><b>NB : </b> Dans certains niveaux l'ordre est requis, vous avez 45 minutes</p>
        <button class="black">Bonne chance à vous</button>
    </div>
    <!-- header -->
    <div class="header">
        <p class="time">Time: <span style="font-weight: bolder" class="Time"></span></p>
    </div><br><br>
    <div id="ttr"></div>
    <div class="cont">
    </div>

    <div id="resultat">
        <h1>Resultat</h1>
        <p class="res"></p>
        <p><span> Pourcentage : </span><span class="percent"></span></p>
    </div>
    <button class="validate" style="display: none"></button>
    <span class="go">GO</span>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/jquery-3.4.1.min.js"></script>
    <script>
        const socket = io('http://localhost:3000/nan_games/games/memory');
        $(window).on('load',function(){
            $('#preloader').fadeOut(400);
        });
        let verifTab,tab,all,comptClick,DATAS, go = document.querySelector('#game .go'),comptScale,endGame = false;
        const setData = (data) => {
            verifTab = [];
            tab = [];
            all = [];
            comptClick = false;
            DATAS = data;
        };

        if(<%= gardeSession %>){
            socket.emit('sessionkeep');
        }

        const setBlockWhite = ()=>{
            $('.child').each(function(){
                $(this).css('background-color','white');
            });
        };

        const setBlock = (data) => {
            $('.cont').html('');
            set(data.nombre_case);
            $('.child').each(function(){
                $(this).css('display','flex');
            });
        };

        const getRandomCase = (compt) => {
            all = document.querySelectorAll('.child');
            while (compt > 0) {
                let number = Math.floor(Math.random() * all.length);
                while (tab.includes(number)) {
                    number = Math.floor(Math.random() * all.length);
                }
                tab.push(number);
                compt--;
            }
        };

        const setRandomCase = (compt,data) => {
            console.log(compt);
            console.log(tab[compt]);
            let int = setInterval(() => {
                all[tab[compt]].style.backgroundColor = 'blue';
                compt++;
                if (compt === tab.length) {
                    clearInterval(int);
                    let awaitime = 3;
                    let Await = setInterval(() => {
                        awaitime--;
                        if (awaitime === 0) {
                            clearInterval(Await);
                            for (let i = 0; i < tab.length; i++) {
                                all[tab[i]].style.backgroundColor = 'white';
                                comptClick = true;
                            }
                            aff(data)
                        }
                    }, data.temps_transition);
                }
            }, data.temps_affichage);
        };


        const reproduceEventByUser = (data) =>{
            createProgressbar('ttr',data.temps_reponse+'s',()=>{
                document.querySelector('#ttr').removeChild(document.querySelector('.inner'));
                comptClick = false;
                document.querySelector('.validate').click();
            });
            for (let i = 0; i < all.length; i++) {
                all[i].addEventListener('click', () => {
                    if (comptClick) {
                        all[i].style.backgroundColor = "grey";
                        verifTab.push(i);
                        if (verifTab.length === tab.length) {
                            comptClick = false;
                            document.querySelector('.validate').click();
                        }
                    }
                });
            }
        };

        const Game = (DATAS) => {
            if(!endGame){
                setData(DATAS);
                let c = 2;
                const int = setInterval(()=>{
                    c--;
                    if(c === 1){
                        setBlock(DATAS);
                    }
                    if(c === 0){
                        clearInterval(int);
                        $('#preloader').fadeOut(400);
                        let compt = DATAS.case_visible;
                        getRandomCase(compt);
                        compt = 0;
                        setRandomCase(compt,DATAS);
                    }
                },500);
            }
        };

        const aff = (donne) => {
            go.style.display = "block";
            comptScale = 0;
            const int2 = setInterval(()=>{
                comptScale+=1;
                let opa = window.getComputedStyle(go,null).opacity;
                go.style.opacity = (parseFloat(opa)-0.5).toString();
                go.style.transform = "scale("+comptScale+")";
                if(comptScale === 20){
                    console.log(go.style.opacity);
                    console.log(go.style.transform);
                    clearInterval(int2);
                    go.style.display = "none";
                    go.style.opacity = "1";
                    go.style.transform =  "scale(0)";
                    reproduceEventByUser(donne);
                }
            },20);
        };

        const ifIsMatch = (tab1, tab2,ordre) => {
            let verif = true;
            if(ordre){
                for (let i = 0; i < tab1.length; i++) {
                    if (tab1[i] !== tab2[i]) {
                        verif = false;
                    }
                }
            }else{
                for (let i = 0; i < tab2.length; i++) {
                    if(!tab1.includes(tab2[i])){
                        verif = false;
                    }
                }
            }
            return verif;

        };

        const afficheNiveau = (data)=>{
            setBlockWhite();
            $('#preloader h2').text("niveau "+data);
            $('#preloader p').text('');
            $('#preloader').fadeIn(400);
        };

        const getTime = (time) => {
            const timeTab = time.split(':');
            const Time = document.querySelector('.Time');
            Time.textContent = time;
            console.log(Time.textContent);
            let hour = parseInt(timeTab[0]),min = parseInt(timeTab[1]),sec = parseInt(timeTab[2]);
                const decompt = setInterval(()=>{
                    sec--;
                    if(hour > 0){
                        if(sec === -1){
                            sec = 59;
                            min--
                            if(min === -1){
                                min = 59;
                                hour--
                            }
                        }
                    }else if(min > 0){
                        if(sec === -1){
                            sec = 59;
                            min--
                        } 
                    }else{
                        if( sec === 0){
                            clearInterval(decompt);
                            endGame = true;
                            alert('end');
                            $('#preloader h2').text("");
                            $('#preloader p').text("patientez pour votre résultat");
                            $('#preloader').fadeIn(400);
                            $('#game').css('background','black !important');
                            $('#game .cont').css('display','none');
                            $('.progressbar').css('display','none');
                            $('.header').css('display','none');
                            socket.emit('endGame')
                        }
                    }
                    Time.textContent = hour+":"+min+":"+sec;
                },1000);
        };
        document.querySelector('.validate').addEventListener('click',()=>{
            if(!endGame){
                console.log('je clique');
                if(verifTab.length === 0){
                    afficheNiveau(DATAS.niveau);
                    socket.emit('setTentative',DATAS.niveau)
                }else if(verifTab.length > 0 && verifTab.length < tab.length){
                    for (let i = 0; i < verifTab.length; i++) {
                        all[verifTab[i]].style.backgroundColor = 'red';
                    }
                    let awaitime = 3;
                    let Await = setInterval(() => {
                        awaitime--;
                        console.log('cool');
                        if (awaitime === 0) {
                            clearInterval(Await);
                            afficheNiveau(DATAS.niveau);
                            socket.emit('setTentative',DATAS.niveau)
                        }
                    }, 200);
                }else if (ifIsMatch(verifTab, tab, DATAS.ordre)) {
                        document.querySelector('.inner').style.animation = "none";
                        document.querySelector('#ttr').removeChild(document.querySelector('.inner'));
                        for (let i = 0; i < tab.length; i++) {
                            all[tab[i]].style.backgroundColor = 'lime';
                        }
                        let awaitime = 3;
                        let Await = setInterval(() => {
                            awaitime--;
                            if (awaitime === 0) {
                                clearInterval(Await);
                                    afficheNiveau(DATAS.niveau+1);
                                    socket.emit('passlevel',DATAS.niveau)
                                }
                            }, 200);
                }else{
                    document.querySelector('.inner').style.animation = "none";
                    document.querySelector('#ttr').removeChild(document.querySelector('.inner'));
                    for (let i = 0; i < tab.length; i++) {
                        all[verifTab[i]].style.backgroundColor = 'red';
                    }
                    let awaitime = 3;
                    let Await = setInterval(() => {
                        awaitime--;
                        if (awaitime === 0) {
                            clearInterval(Await);
                            afficheNiveau(DATAS.niveau);
                            socket.emit('setTentative',DATAS.niveau)
                        }
                    }, 200);
                }
            }
            return false;
        });
        const button = document.querySelector('.welcome button');
        button.addEventListener('click',()=>{
            document.querySelector('.welcome').style.display = "none";
            document.querySelector('.ombre').style.display = "none";
            afficheNiveau(1);
            socket.emit('begin_game_memory')
        });

        const set = (string) =>{
            const numberOfCase = eval(string);
            const firstNumber = parseInt(string.slice(0,string.indexOf('*')));
            const secondNumber = parseInt(string.slice(string.indexOf('*')+1,string.length));
            let width = 0,height = 0;
            if(firstNumber >= 2 && firstNumber <= 6){
                width =  150;
                height = 150;
            }else if((firstNumber >= 7 && firstNumber <= 10) && (secondNumber >= 1 && secondNumber <= 6)){
                width = 100;
                height = 100;
            }else if((firstNumber >= 7 && firstNumber <= 10) && (secondNumber >= 7 && secondNumber <= 10)){
                width = 85;
                height = 85;
            }else if(firstNumber >= 11 && firstNumber <= 15){
                width = 70;
                height = 70;
            }
            $('.cont').css('width',width * firstNumber+30+'px');
            $('.cont').css('height',height * secondNumber +30+'px');
            for(let i = 0; i < numberOfCase; i++){
                $('.cont').html($('.cont').html()+`<div class="child" style="width:${width}px;height:${height}px"></div>`);
            }
        };

        socket.on('begin_game_memory',(duree,data)=>{
            getTime(duree);
            Game(data)
        });
        socket.on('gameInstance',(duree,data)=>{
            afficheNiveau(data.niveau);
            getTime(duree);
            Game(data)
        });

        socket.on('passlevel',(data)=>{
            Game(data);
        });

        function createProgressbar(id, duration, callback) {
            // We select the div that we want to turn into a progressbar
            console.log(duration);
            var progressbar = document.getElementById(id);
            progressbar.className = 'progressbar';

            // We create the div that changes width to show progress
            var progressbarinner = document.createElement('div');
            progressbarinner.className = 'inner';

            // Now we set the animation parameters
            progressbarinner.style.animationDuration = duration;

            // Eventually couple a callback
            if (typeof(callback) === 'function') {
                progressbarinner.addEventListener('animationend', callback);
            }

            // Append the progressbar to the main progressbardiv
            progressbar.appendChild(progressbarinner);

            // When everything is set up we start the animation
            progressbarinner.style.animationPlayState = 'running';
        }

        socket.on('setTentative',(data)=>{
            Game(data);
        });

        socket.on('endGame',(data)=>{
            $('#preloader').fadeOut(300);
            $('#resultat').fadeIn(300);
            $('.ombre').fadeIn(300);
            if(data.ops[0].a_valide){
                $('#resultat p.res').text('success')
                $('#resultat').addClass('success');
                $('#resultat')
            }else{
                $('#resultat p.res').text('Fail')
                $('#resultat').addClass('fail');
            }
            $('#resultat span.percent').text(data.ops[0].pourcentage+'%');

        })

    </script>
    <script>
        document.querySelector('.welcome').style.opacity = "1";
        document.querySelector('.ombre').style.opacity = "0.8";
    </script>
</body>

</html>